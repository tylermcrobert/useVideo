{"version":3,"sources":["lib/useVideo.js","lib/index.js","index.js"],"names":["globalData","round","num","place","arguments","length","undefined","Math","getFunctions","video","cb","play","pause","mute","muted","unmute","seek","e","persist","currentTime","target","value","fullscreen","screenfull","request","setFromVideo","_globalData2","state","updateState","percent","duration","ready","time","isPlaying","paused","useVideo","input","ref","useRef","_useSetState","useSetState","_useSetState2","Object","slicedToArray","setState","newState","prevState","objectSpread","useEffect","current","_globalData","update","addEventListener","addListeners","console","log","useInterval","functions","rootElement","document","getElementById","ReactDOM","render","react_default","a","createElement","_useVideo","autoPlay","loop","style","width","src","type","className","onClick","Fragment","toString","min","max","onChange"],"mappings":"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","file":"static/js/main.0fdabc4b.chunk.js","sourcesContent":["import { useRef, useEffect } from 'react'\nimport useInterval from 'use-interval'\nimport { useSetState } from 'react-use'\nimport screenfull from 'screenfull'\n\nlet globalData\n\nconst round = (num, place = 100) => Math.round(num * place) / place\n\nfunction addListeners() {\n  const { video, updateState } = globalData\n  const update = () => setFromVideo(globalData)\n  const setReady = () => updateState({ ready: true })\n\n  video.addEventListener('loadeddata', setReady)\n  video.addEventListener('play', update)\n  video.addEventListener('pause', update)\n  video.addEventListener('volumechange', update)\n  video.addEventListener('seeking', update)\n}\n\nfunction getFunctions(video) {\n  const _onload = cb => (video ? cb : null)\n  const pause = () => video.pause()\n  const play = () => video.play()\n  const mute = () => (video.muted = true)\n  const unmute = () => (video.muted = false)\n  const seek = e => {\n    e.persist()\n    video.currentTime = e.target.value\n  }\n\n  const fullscreen = () => {\n    screenfull.request(video)\n  }\n\n  return {\n    play,\n    pause,\n    mute,\n    unmute,\n    seek,\n    fullscreen: _onload(fullscreen)\n  }\n}\n\nfunction setFromVideo() {\n  const { video, state, updateState } = globalData\n  const percent =\n    video.duration > 0 ? (video.currentTime / video.duration) * 100 : 0\n\n  if (state.ready) {\n    updateState({\n      duration: video.duration,\n      time: round(video.currentTime),\n      percent: round(percent),\n      muted: video.muted,\n      isPlaying: !video.paused\n    })\n  }\n}\n\nexport default function useVideo(input) {\n  const ref = useRef()\n  const [state, setState] = useSetState({\n    isPlaying: false, // null?\n    muted: false, // null?\n    duration: 0,\n    time: 0,\n    percent: 0\n  })\n  const updateState = newState =>\n    setState(prevState => ({ ...prevState, ...newState }))\n\n  useEffect(\n    () => {\n      globalData = { video: ref.current, state, updateState }\n      setFromVideo()\n      addListeners()\n\n      return () => {\n        console.log('unmounted')\n      }\n    },\n    [state.ready, state.isPlaying]\n  )\n\n  useInterval(() => setFromVideo(), state.isPlaying ? 500 : null)\n\n  return {\n    ref,\n    state,\n    functions: getFunctions(ref.current)\n  }\n}\n","import useVideo from \"./useVideo\";\nexport default useVideo;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport useVideo from './lib'\nimport './index.css'\n\nfunction App() {\n  const { ref, state, functions } = useVideo(\n    <video muted autoPlay loop style={{ width: '100%' }}>\n      <source\n        src=\"https://app.coverr.co/s3/mp4/4X4-in-Vinyard.mp4\"\n        type=\"video/mp4\"\n      />\n    </video>\n  )\n\n  console.log({ state, functions })\n\n  const togglePlay = () =>\n    state.isPlaying ? functions.pause() : functions.play()\n\n  return (\n    <div className=\"App\">\n      <video ref={ref} onClick={togglePlay} muted loop>\n        <source\n          src=\"https://app.coverr.co/s3/mp4/4X4-in-Vinyard.mp4\"\n          type=\"video/mp4\"\n        />\n      </video>\n      {state.ready && (\n        <>\n          <p>ready: {state.ready.toString()}</p>\n          <p>playing: {state.isPlaying.toString()}</p>\n          <p>duration: {state.duration}s</p>\n          <p>muted: {state.muted.toString()}</p>\n          <p>time: {state.time}s</p>\n          <p>percent: {state.percent}%</p>\n          {state.isPlaying ? (\n            <button onClick={functions.pause}>Pause</button>\n          ) : (\n            <button onClick={functions.play}>play</button>\n          )}\n          {state.muted ? (\n            <button onClick={functions.unmute}>Unmute</button>\n          ) : (\n            <button onClick={functions.mute}>Mute</button>\n          )}\n          <button onClick={functions.fullscreen}>Full Screen</button>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max={state.duration}\n            value={state.time}\n            onChange={functions.seek}\n          />\n        </>\n      )}\n    </div>\n  )\n}\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(<App />, rootElement)\n"],"sourceRoot":""}